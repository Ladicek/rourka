apiVersion: v1
kind: Template
metadata:
  name: ci-fmp-sso-template
parameters:
- name: CI_NAME
  description: "Name of the generated BuildConfig; format: ci-fmp-<runtime>-<mission>"
  required: true
- name: CI_DESCRIPTION
  description: "Description of the mission; format: Runtime | ID: Mission name"
  required: true
- name: CI_GIT_URL
  description: URL of a Git repository containing the tested code
  required: true
- name: CI_GIT_REF
  description: Git ref that should be checked out from CI_GIT_URL
  required: true
  value: master
- name: CI_GITHUB_SECRET
  description: A secret value to use for GitHub webhook URL
  required: true
  generate: expression
  from: "[a-zA-Z0-9]{20}"
- name: MAVEN_REPO_ADD
  description: URL of an additional Maven repo that should be added to and enabled in ~/.m2/settings.xml
- name: IS_REDHAT
  description: Whether to perform any actions required only for Red Hat builds
  required: true
  value: "false"
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: "${CI_NAME}"
    annotations:
      ci/description: "${CI_DESCRIPTION}"
      ci/type: "Fabric8 Maven plugin"
  spec:
    completionDeadlineSeconds: 1800
    source:
      type: Git
      git:
        uri: "${CI_GIT_URL}"
        ref: "${CI_GIT_REF}"
    triggers:
    - type: GitHub
      github:
        secret: "${CI_GITHUB_SECRET}"
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |
          node("launchpad-maven") {
            if ('${MAVEN_REPO_ADD}' != '') {
              stage("Adjust settings.xml") {
                sh 'sed -i "s|https://maven.repository.redhat.com/techpreview/all|${MAVEN_REPO_ADD}|" /home/jenkins/.m2/settings.xml'
                sh 'sed -i "s|</activeProfiles>|<activeProfile>jboss-eap-repository</activeProfile></activeProfiles>|" /home/jenkins/.m2/settings.xml'
              }
            }

            stage("Checkout") {
              // can't use just "git url: ..., branch: ..." because that doesn't support tags
              checkout([$class: 'GitSCM',
                        branches: [[name: '${CI_GIT_REF}']],
                        userRemoteConfigs: [[url: '${CI_GIT_URL}']]])

              if ('${IS_REDHAT}' == 'true') {
                sh "mv pom-redhat.xml pom.xml || true"
              }
            }

            def ssoUrl
            stage("Deploy SSO") {
              sh "oc apply -f service.sso.yaml"
              ssoUrl = sh(
                script: "oc get route secure-sso -o jsonpath='https://{.spec.host}/auth'",
                returnStdout: true
              ).trim()
            }

            try {
              stage("Local test") {
                sh "mvn clean verify -B"
              }

              stage("OpenShift test") {
                sh "oc policy add-role-to-user view -z default"
                if ('${CI_NAME}'.contains('vertx')) {
                  sh "mvn clean fabric8:deploy -Popenshift && sleep 60 && mvn verify -Popenshift,openshift-it && mvn fabric8:undeploy"
                } else {
                  sh "mvn clean verify -B -Popenshift,openshift-it -DSSO_AUTH_SERVER_URL=${ssoUrl}"
                }
              }
            } finally {
              stage("Publish results") {
                junit allowEmptyResults: true, keepLongStdio: true, testResults: "**/target/*-reports/*.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "**/target/*-reports/*.xml"
              }

              stage("Undeploy SSO") {
                sh "oc delete -f service.sso.yaml"
              }
            }
          }
