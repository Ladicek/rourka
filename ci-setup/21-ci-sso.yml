apiVersion: v1
kind: Template
metadata:
  name: ci-sso-template
parameters:
- name: CI_NAME
  description: "Name of the generated BuildConfig; format: ci-runtime-mission"
  required: true
- name: CI_DESCRIPTION
  description: "Description of the mission; format: Runtime | ID: Mission name"
  required: true
- name: CI_TYPE
  description: "What is being tested (e.g. booster CI)"
  required: true
- name: CI_GIT_URL
  description: URL of a Git repository containing the tested code
  required: true
- name: CI_GIT_REF
  description: Git ref that should be checked out from CI_GIT_URL
  required: true
  value: master
- name: CI_GITHUB_SECRET
  description: A secret value to use for GitHub webhook URL
  required: true
  generate: expression
  from: "[a-zA-Z0-9]{20}"
- name: MAVEN_MIRROR
  description: URL of a Maven proxy that should be put to ~/.m2/settings.xml as a mirror of external:*
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: "${CI_NAME}"
    annotations:
      ci/description: "${CI_DESCRIPTION}"
      ci/type: "${CI_TYPE}"
  spec:
    source:
      type: Git
      git:
        uri: "${CI_GIT_URL}"
        ref: "${CI_GIT_REF}"
    triggers:
    - type: GitHub
      github:
        secret: "${CI_GITHUB_SECRET}"
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |
          node("launchpad-maven") {
            if ('${MAVEN_MIRROR}' != '') {
              stage("Adjust settings.xml") {
                sh 'sed -i "s|<!-- ### configured mirrors ### -->|<mirror><id>default</id><url>${MAVEN_MIRROR}</url><mirrorOf>external:*</mirrorOf></mirror>|" /home/jenkins/.m2/settings.xml'
              }
            }

            stage("Checkout") {
              // can't use just "git url: ..., branch: ..." because that doesn't clone submodules
              checkout([$class: 'GitSCM',
                        branches: [[name: '${CI_GIT_REF}']],
                        extensions: [[$class: 'SubmoduleOption']],
                        userRemoteConfigs: [[url: '${CI_GIT_URL}']]])
            }

            def ssoUrl
            stage("Deploy SSO") {
              sh "export _JAVA_OPTIONS=-Xmx256m; cd sso; mvn fabric8:deploy -B"
              ssoUrl = sh(
                script: 'cd sso; java -jar target/sso-client.jar --displaySSOURL',
                returnStdout: true
              ).trim()
              ssoUrl = (ssoUrl =~ /Using auth server URL: (.+)/)
              ssoUrl = ssoUrl[0][1]
            }

            try {
              stage("Deploy secured app") {
                sh "cd app; mvn fabric8:deploy -B -Popenshift -DSSO_AUTH_SERVER_URL=${ssoUrl}"
              }

              try {
                stage("SSO test") {
                  sleep 60 // wait a bit for SSO and secured app to actually start
                  sh "cd sso; export _JAVA_OPTIONS=-Xmx256m; mvn verify -B -Psso-tests"
                }
              } finally {
                stage("Publish results") {
                  junit allowEmptyResults: true, keepLongStdio: true, testResults: "**/target/*-reports/*.xml"
                  archiveArtifacts allowEmptyArchive: true, artifacts: "**/target/*-reports/*.xml"
                }

                stage("Undeploy secured app") {
                  sh "cd app; mvn fabric8:undeploy -B"
                }
              }
            } finally {
              stage("Undeploy SSO") {
                sh "cd sso; mvn fabric8:undeploy -B"
              }
            }
          }
