apiVersion: v1
kind: Template
metadata:
  name: ci-basic-template
parameters:
- name: CI_NAME
  description: "Name of the generated BuildConfig; format: ci-runtime-mission"
  required: true
- name: CI_DESCRIPTION
  description: "Description of the mission; format: Runtime | ID: Mission name"
  required: true
- name: CI_TYPE
  description: "What is being tested (e.g. booster CI)"
  required: true
- name: CI_GIT_URL
  description: URL of a Git repository containing the tested code
  required: true
- name: CI_GIT_REF
  description: Git ref that should be checked out from CI_GIT_URL
  required: true
  value: master
- name: CI_GITHUB_SECRET
  description: A secret value to use for GitHub webhook URL
  required: true
  generate: expression
  from: "[a-zA-Z0-9]{20}"
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: "${CI_NAME}"
    annotations:
      ci/description: "${CI_DESCRIPTION}"
      ci/type: "${CI_TYPE}"
  spec:
    source:
      type: Git
      git:
        uri: "${CI_GIT_URL}"
        ref: "${CI_GIT_REF}"
    triggers:
    - type: GitHub
      github:
        secret: "${CI_GITHUB_SECRET}"
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |
          node("launchpad-maven") {
            stage("Checkout") {
              git url: '${CI_GIT_URL}', branch: '${CI_GIT_REF}'
            }

            try {
              stage("Local test") {
                sh "mvn clean verify"
              }

              stage("OpenShift test") {
                sh "oc policy add-role-to-user view -z default"
                sh "mvn clean verify -Popenshift,openshift-it"
              }
            } finally {
              stage("Publish results") {
                junit allowEmptyResults: true, keepLongStdio: true, testResults: "**/target/*-reports/*.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "**/target/*-reports/*.xml"
              }
            }
          }
